#!/usr/bin/env php
<?php
/**
 * stasi shell, invoked from ~/.ssh/authorized_keys
 *
 * Wraper of ssh comunication.
 * This is logging only.
 *
 * At future:
 *	acl
 *	relative repository
 *	manage user, repositories, konfigure by admin-repo, like gitolite
 *	manage wrapered ~/.ssh/authorized_keys
 */

require_once __dir__ . '/../lib/Stasi/Shell/exceptions.php';


require_once __dir__ . '/../lib/Stasi/Shell/ConfigReaderInterface.php';
require_once __dir__ . '/../lib/Stasi/Shell/ConfigXmlReader.php';
require_once __dir__ . '/../lib/Stasi/Shell/Config.php';

require_once __dir__ . '/../lib/Stasi/Shell/Router.php';
require_once __dir__ . '/../lib/Stasi/Shell/Request.php';
require_once __dir__ . '/../lib/Stasi/Shell/Parser.php';
require_once __dir__ . '/../lib/Stasi/Shell/ParserGit.php';
require_once __dir__ . '/../lib/Stasi/Shell/Dispatcher.php';
require_once __dir__ . '/../lib/Stasi/Shell/Logger.php';

//	Responses
require_once __dir__ . '/../lib/Stasi/Shell/Responses/ResponseInterface.php';
require_once __dir__ . '/../lib/Stasi/Shell/Responses/Response.php';
require_once __dir__ . '/../lib/Stasi/Shell/Responses/ExecResponse.php';

//	Commands
require_once __dir__ . '/../lib/Stasi/Shell/Commands/CommandInterface.php';
require_once __dir__ . '/../lib/Stasi/Shell/Commands/CommandAbstract.php';
require_once __dir__ . '/../lib/Stasi/Shell/Commands/OriginalCommand.php';
require_once __dir__ . '/../lib/Stasi/Shell/Commands/GitCommand.php';

//	Models
require_once __dir__ . '/../lib/Stasi/Shell/Model/Builder.php';
require_once __dir__ . '/../lib/Stasi/Shell/Model/Application.php';
require_once __dir__ . '/../lib/Stasi/Shell/Model/Acl.php';
require_once __dir__ . '/../lib/Stasi/Shell/Model/User.php';


use Taco\Tools\Stasi\Shell;


try {
	$config = new Shell\Config($_SERVER);
	$logger = new Shell\Logger($config->getLogsPath());
}
catch (\Exception $e) {
	file_put_contents('php://stderr', '[fatal] (Staci): cannot initialize - ' . $e->getMessage() . PHP_EOL);
	exit($e->getCode() > 0 ? $e->getCode() : 254);
}


try {
	$router = new Shell\Router();
	$request = $router->createRequest($_SERVER);
	$modelBuilder = new Shell\ModelBuilder($config);
	$dispatcher = new Shell\Dispatcher($config, $modelBuilder);
	$dispatcher->setLogger($logger);
	$response = $dispatcher->dispatch($request);
	$response->fetch();
}
catch (\Exception $e) {
	file_put_contents('php://stderr', '[fatal] (Staci): ' . $e->getMessage() . PHP_EOL);
	$logger->trace('failed', $e->getMessage());
	exit($e->getCode() > 0 ? $e->getCode() : 254);
}

